{"remainingRequest":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/node_modules/babel-loader/lib/index.js!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/src/components/Note.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/src/components/Note.vue","mtime":1552342490000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Header from \"./Header.vue\";\nimport commonHelpers from \"@/helpers/common\";\nimport blockchainHelpers from \"@/helpers/blockchain\";\nimport web3 from \"./../web3\";\nimport notesContract from \"./../notes\";\nimport CryptoJS from \"crypto-js\";\nexport default {\n  name: \"Note\",\n  data: function data() {\n    return {\n      contract: {\n        token: this.$route.params.token,\n        whichNetwork: this.$route.params.whichNetwork,\n        secretKey: \"\",\n        note: \"\"\n      },\n      decrypted: false,\n      error: null\n    };\n  },\n  components: {\n    Header: Header\n  },\n  created: function created() {\n    // redirect if invalid token\n    if (!blockchainHelpers.doesTokenExist(this.contract.token)) {//   this.$router.push({\n      //     name: \"/\"\n      //   });\n    }\n  },\n  methods: {\n    getNote: function () {\n      var _getNote = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var shouldGetNote, secretKey, c, note;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.error = null;\n                shouldGetNote = false;\n                secretKey = this.contract.secretKey;\n\n                if (secretKey !== \"\") {\n                  shouldGetNote = true;\n                } else {\n                  this.error = \"Please enter a secret key to access this note.\";\n                }\n\n                if (!shouldGetNote) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 7;\n                return notesContract.methods.getNote(this.contract.token).call();\n\n              case 7:\n                c = _context.sent;\n                note = \"\";\n\n                if (c[1] !== \"\") {\n                  note = CryptoJS.AES.decrypt(c[1], secretKey).toString(CryptoJS.enc.Utf8);\n                } else {\n                  this.error = \"Unable to retrieve note from the blockchain.\";\n                }\n\n                if (note !== \"\") {\n                  this.contract.note = note;\n                  this.decrypted = true;\n                } else {\n                  this.error = \"Incorrect secret key provided. Please try again.\";\n                }\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getNote() {\n        return _getNote.apply(this, arguments);\n      }\n\n      return getNote;\n    }() // getNote() {\n    //   console.log(this.contract.token);\n    //   console.log(this.contract.whichNetwork);\n    // }\n\n  }\n};",{"version":3,"sources":["Note.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAA,MAAA,MAAA,cAAA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,iBAAA,MAAA,sBAAA;AAEA,OAAA,IAAA,MAAA,WAAA;AACA,OAAA,aAAA,MAAA,YAAA;AAEA,OAAA,QAAA,MAAA,WAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,QAAA,EAAA;AACA,QAAA,KAAA,EAAA,KAAA,MAAA,CAAA,MAAA,CAAA,KADA;AAEA,QAAA,YAAA,EAAA,KAAA,MAAA,CAAA,MAAA,CAAA,YAFA;AAGA,QAAA,SAAA,EAAA,EAHA;AAIA,QAAA,IAAA,EAAA;AAJA,OADA;AAOA,MAAA,SAAA,EAAA,KAPA;AAQA,MAAA,KAAA,EAAA;AARA,KAAA;AAUA,GAbA;AAcA,EAAA,UAAA,EAAA;AACA,IAAA,MAAA,EAAA;AADA,GAdA;AAiBA,EAAA,OAjBA,qBAiBA;AACA;AACA,QAAA,CAAA,iBAAA,CAAA,cAAA,CAAA,KAAA,QAAA,CAAA,KAAA,CAAA,EAAA,CACA;AACA;AACA;AACA;AACA,GAxBA;AAyBA,EAAA,OAAA,EAAA;AACA,IAAA,OADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,qBAAA,KAAA,GAAA,IAAA;AACA,gBAAA,aAHA,GAGA,KAHA;AAIA,gBAAA,SAJA,GAIA,KAAA,QAAA,CAAA,SAJA;;AAKA,oBAAA,SAAA,KAAA,EAAA,EAAA;AACA,kBAAA,aAAA,GAAA,IAAA;AACA,iBAFA,MAEA;AACA,uBAAA,KAAA,GAAA,gDAAA;AACA;;AATA,qBAWA,aAXA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAYA,aAAA,CAAA,OAAA,CACA,OADA,CACA,KAAA,QAAA,CAAA,KADA,EAEA,IAFA,EAZA;;AAAA;AAYA,gBAAA,CAZA;AAgBA,gBAAA,IAhBA,GAgBA,EAhBA;;AAiBA,oBAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAAA,EAAA;AACA,kBAAA,IAAA,GAAA,QAAA,CAAA,GAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,SAAA,EAAA,QAAA,CACA,QAAA,CAAA,GAAA,CAAA,IADA,CAAA;AAGA,iBAJA,MAIA;AACA,uBAAA,KAAA,GAAA,8CAAA;AACA;;AAEA,oBAAA,IAAA,KAAA,EAAA,EAAA;AACA,uBAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AACA,uBAAA,SAAA,GAAA,IAAA;AACA,iBAHA,MAGA;AACA,uBAAA,KAAA,GAAA,kDAAA;AACA;;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,QAiCA;AACA;AACA;AACA;;AApCA;AAzBA,CAAA","sourcesContent":["<template>\n  <div class=\"row\">\n    <Header></Header>\n    <div class=\"container\">\n      <div class=\"card flow-text\" v-if=\"!decrypted\">\n        <div class=\"card-content\">\n          <p>Access the Encrypted Note</p>\n          <div class=\"row\">\n            <div class=\"input-field col s12\">\n              <input id=\"secretKey\" type=\"text\" v-model=\"contract.secretKey\">\n              <label for=\"secretKey\">Secret Key</label>\n            </div>\n            <div class=\"error\" v-if=\"error!==null\">{{ error }}</div>\n          </div>\n        </div>\n        <div class=\"card-action\">\n          <button class=\"waves-effect waves-light btn-large\" @click.prevent=\"getNote ()\">\n            <i class=\"material-icons left\">wrap_text</i>Retrieve Note\n          </button>\n        </div>\n      </div>\n      <div class=\"card flow-text\" v-else>\n        <div class=\"card-content\">\n          <p>Decrypted Note from the Blockchain</p>\n          <blockquote>{{ contract.note }}</blockquote>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport Header from \"./Header.vue\";\nimport commonHelpers from \"@/helpers/common\";\nimport blockchainHelpers from \"@/helpers/blockchain\";\n\nimport web3 from \"./../web3\";\nimport notesContract from \"./../notes\";\n\nimport CryptoJS from \"crypto-js\";\n\nexport default {\n  name: \"Note\",\n  data() {\n    return {\n      contract: {\n        token: this.$route.params.token,\n        whichNetwork: this.$route.params.whichNetwork,\n        secretKey: \"\",\n        note: \"\"\n      },\n      decrypted: false,\n      error: null\n    };\n  },\n  components: {\n    Header\n  },\n  created() {\n    // redirect if invalid token\n    if (!blockchainHelpers.doesTokenExist(this.contract.token)) {\n      //   this.$router.push({\n      //     name: \"/\"\n      //   });\n    }\n  },\n  methods: {\n    async getNote() {\n      this.error = null;\n      let shouldGetNote = false;\n      const secretKey = this.contract.secretKey;\n      if (secretKey !== \"\") {\n        shouldGetNote = true;\n      } else {\n        this.error = \"Please enter a secret key to access this note.\";\n      }\n\n      if (shouldGetNote) {\n        const c = await notesContract.methods\n          .getNote(this.contract.token)\n          .call();\n\n        let note = \"\";\n        if (c[1] !== \"\") {\n          note = CryptoJS.AES.decrypt(c[1], secretKey).toString(\n            CryptoJS.enc.Utf8\n          );\n        } else {\n          this.error = \"Unable to retrieve note from the blockchain.\";\n        }\n\n        if (note !== \"\") {\n          this.contract.note = note;\n          this.decrypted = true;\n        } else {\n          this.error = \"Incorrect secret key provided. Please try again.\";\n        }\n      }\n    }\n    // getNote() {\n    //   console.log(this.contract.token);\n    //   console.log(this.contract.whichNetwork);\n    // }\n  }\n};\n</script>\n<style>\n#secretKey,\nlabel {\n  font-size: 22px;\n  font-weight: lighter;\n  color: #757575;\n}\n</style>\n"],"sourceRoot":"src/components"}]}