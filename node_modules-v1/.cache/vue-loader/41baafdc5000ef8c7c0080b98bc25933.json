{"remainingRequest":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/src/components/TextForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/src/components/TextForm.vue","mtime":1552370058147},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part-v2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport commonHelpers from \"@/helpers/common\";\nimport blockchainHelpers from \"@/helpers/blockchain\";\n\nimport web3 from \"./../web3\";\nimport notesContract from \"./../notes\";\n\nimport CryptoJS from \"crypto-js\";\n\nglobal.jQuery = require(\"jquery\");\nvar $ = global.jQuery;\nwindow.$ = $;\n\nexport default {\n  name: \"TextForm\",\n  data() {\n    return {\n      contract: {\n        owner: null,\n        transactionHash: null\n      },\n      networks: {\n        test: \"Test Network\",\n        blockchain: \"Blockchain\"\n      },\n      genericNote: \"Write a note you wish to save on the Ethereum\",\n      isTest: true,\n      note: null,\n      form: {\n        note: \"\",\n        secretKey: \"\",\n        token: \"\"\n      },\n      error: null\n    };\n  },\n  methods: {\n    selectNetwork(e) {\n      if (e.target.checked) {\n        this.isTest = false;\n      } else {\n        this.isTest = true;\n      }\n    },\n    async submitForm() {\n      this.form.token = commonHelpers.generateRandomDigits(8);\n      this.form.secretKey = commonHelpers.generateRandomDigits(8);\n\n      const token = this.form.token;\n\n      let canSubmit = false;\n      if (this.isFormValid()) {\n        canSubmit = true;\n      }\n\n      if (!(await blockchainHelpers.doesTokenExist(token))) {\n        canSubmit = true;\n      } else {\n        canSubmit = false;\n        this.error =\n          \"A note with this token already exists. Please refresh and try again!\";\n      }\n\n      if (canSubmit) {\n        const dt = new Date();\n        const dateCreated = dt.getTime();\n\n        this.createNote(token, dateCreated, this.form.note);\n      }\n    },\n    isFormValid() {\n      this.error = null;\n      if (this.form.note === \"\" || this.form.secretKey === \"\") {\n        this.error = \"Please write a note.\";\n      }\n      return this.error === null ? true : false;\n    },\n    encryptNote(note) {\n      return CryptoJS.AES.encrypt(note, this.form.secretKey).toString();\n    },\n    async createNote(token, dateCreated, note) {\n      // submit the form\n      const accounts = await web3.eth.getAccounts();\n      if (accounts.length === 0) {\n        const err = \"Please log into metamask account to proceed.\";\n        this.error = err;\n        alert(err);\n      }\n\n      if (this.error === null) {\n        // encrypt the note\n        note = this.encryptNote(note);\n\n        await notesContract.methods\n          .createNote(token, dateCreated, note)\n          .send({\n            // assuming first account in metamask is the one the user wishes to use\n            from: accounts[0]\n          })\n          .on(\"transactionHash\", tx => {\n            this.contract.transactionHash = tx;\n            runProgressBar();\n            this.$emit(\"animate\", { action: true });\n          })\n          .on(\"confirmation\", (confirmationNumber, receipt) => {\n            this.$emit(\"animate\", { action: false });\n            this.$router.push({\n              name: \"TransactionDetails\",\n              params: {\n                transaction_id: this.contract.transactionHash,\n                token: this.form.token,\n                secretKey: this.form.secretKey,\n                whichNetwork: this.isTest === true ? \"rinkeby\" : \"mainnet\"\n              }\n            });\n          });\n      }\n    }\n  },\n  async created() {\n    this.contract.owner = await notesContract.methods.owner().call();\n  }\n  // updated() {\n  //   $(document).ready(function() {\n  //     // resize textarea\n  //     // M.updateTextFields();\n  //     // M.textareaAutoResize($(\"#note\"));\n  //   });\n  //   // $(\"document\").on(\"keypress\", function(e) {\n  //   //   $(\"#note\").focus();\n  //   // });\n  // }\n};\n\n$(document).ready(function() {\n  // keep waves at the bottom as additional lines of the note are added\n  $(\"#note\").on(\"keypress\", function(e) {\n    const text = $(this).val();\n    const lines = text.split(/\\r|\\r\\n|\\n/);\n    const totalLines = lines.length;\n\n    if (totalLines > 3) {\n      if (e.which == 13) {\n        $(\".ocean\").css(\"bottom\", `-${totalLines * 48}px`);\n      }\n    }\n  });\n});\n\nfunction runProgressBar() {\n  const container = document.getElementById(\"progress-bar-container\");\n  container.style.display = \"block\";\n\n  let elem = document.getElementById(\"progress-bar\");\n  let width = 0;\n  let id = setInterval(frame, 200);\n  function frame() {\n    if (width >= 100) {\n      elem.innerHTML = \"Your note has been submitted successfully! Stand by...\";\n      clearInterval(id);\n    } else {\n      width++;\n      elem.style.width = width + \"%\";\n      elem.innerHTML = width * 1 + \"%\";\n    }\n  }\n}\n",{"version":3,"sources":["TextForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TextForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"row\">\n    <div class=\"col s6 col-first hide-on-small-only\">\n      <div class=\"project-desc-container\">\n        <div class=\"project-desc\">\n          <div class=\"logo\">\n            <img src=\"../assets/logo.png\">\n          </div>\n          <div class=\"headline\">Is there is a message you would like to securely save forever?</div>\n          <div\n            class=\"desc\"\n          >Use the blockchain to store and share a message only you or your loved ones can view.</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col s6 col-second\">\n      <form class=\"form-container valign-wrapper align-center\">\n        <div>\n          <div id=\"progress-bar-container\">\n            <div class=\"progress-bar-light-grey\">\n              <div\n                id=\"progress-bar\"\n                class=\"progress-bar-strip progress-bar-green progress-bar-center\"\n                style=\"width:0%\"\n              >0%</div>\n            </div>\n          </div>\n          <div class=\"input-field\">\n            <textarea id=\"note\" v-model=\"form.note\" class=\"materialize-textarea active\"></textarea>\n            <label for=\"note\" v-if=\"isTest\">{{ genericNote }} {{ networks.test }}.</label>\n            <label for=\"note\" v-else>{{ genericNote }} {{ networks.blockchain }}.</label>\n          </div>\n          <button\n            class=\"btn waves-effect waves-light btn-large\"\n            type=\"submit\"\n            name=\"action\"\n            @click.prevent=\"submitForm()\"\n          >\n            Save on the\n            <span v-if=\"isTest\">{{ networks.test }}</span>\n            <span v-else>{{ networks.blockchain }}</span>\n            <i class=\"material-icons right\">send</i>\n          </button>\n          <div>\n            <div class=\"error\" v-if=\"error!==null\">{{ error }}</div>\n          </div>\n          <div>\n            <label>\n              <input type=\"checkbox\" v-on:click=\"selectNetwork($event)\">\n              <span>Permanently Save on the Blockchain (Costs Ether)</span>\n            </label>\n          </div>\n        </div>\n      </form>\n\n      <Footer></Footer>\n    </div>\n  </div>\n</template>\n\n<script>\nimport commonHelpers from \"@/helpers/common\";\nimport blockchainHelpers from \"@/helpers/blockchain\";\n\nimport web3 from \"./../web3\";\nimport notesContract from \"./../notes\";\n\nimport CryptoJS from \"crypto-js\";\n\nglobal.jQuery = require(\"jquery\");\nvar $ = global.jQuery;\nwindow.$ = $;\n\nexport default {\n  name: \"TextForm\",\n  data() {\n    return {\n      contract: {\n        owner: null,\n        transactionHash: null\n      },\n      networks: {\n        test: \"Test Network\",\n        blockchain: \"Blockchain\"\n      },\n      genericNote: \"Write a note you wish to save on the Ethereum\",\n      isTest: true,\n      note: null,\n      form: {\n        note: \"\",\n        secretKey: \"\",\n        token: \"\"\n      },\n      error: null\n    };\n  },\n  methods: {\n    selectNetwork(e) {\n      if (e.target.checked) {\n        this.isTest = false;\n      } else {\n        this.isTest = true;\n      }\n    },\n    async submitForm() {\n      this.form.token = commonHelpers.generateRandomDigits(8);\n      this.form.secretKey = commonHelpers.generateRandomDigits(8);\n\n      const token = this.form.token;\n\n      let canSubmit = false;\n      if (this.isFormValid()) {\n        canSubmit = true;\n      }\n\n      if (!(await blockchainHelpers.doesTokenExist(token))) {\n        canSubmit = true;\n      } else {\n        canSubmit = false;\n        this.error =\n          \"A note with this token already exists. Please refresh and try again!\";\n      }\n\n      if (canSubmit) {\n        const dt = new Date();\n        const dateCreated = dt.getTime();\n\n        this.createNote(token, dateCreated, this.form.note);\n      }\n    },\n    isFormValid() {\n      this.error = null;\n      if (this.form.note === \"\" || this.form.secretKey === \"\") {\n        this.error = \"Please write a note.\";\n      }\n      return this.error === null ? true : false;\n    },\n    encryptNote(note) {\n      return CryptoJS.AES.encrypt(note, this.form.secretKey).toString();\n    },\n    async createNote(token, dateCreated, note) {\n      // submit the form\n      const accounts = await web3.eth.getAccounts();\n      if (accounts.length === 0) {\n        const err = \"Please log into metamask account to proceed.\";\n        this.error = err;\n        alert(err);\n      }\n\n      if (this.error === null) {\n        // encrypt the note\n        note = this.encryptNote(note);\n\n        await notesContract.methods\n          .createNote(token, dateCreated, note)\n          .send({\n            // assuming first account in metamask is the one the user wishes to use\n            from: accounts[0]\n          })\n          .on(\"transactionHash\", tx => {\n            this.contract.transactionHash = tx;\n            runProgressBar();\n            this.$emit(\"animate\", { action: true });\n          })\n          .on(\"confirmation\", (confirmationNumber, receipt) => {\n            this.$emit(\"animate\", { action: false });\n            this.$router.push({\n              name: \"TransactionDetails\",\n              params: {\n                transaction_id: this.contract.transactionHash,\n                token: this.form.token,\n                secretKey: this.form.secretKey,\n                whichNetwork: this.isTest === true ? \"rinkeby\" : \"mainnet\"\n              }\n            });\n          });\n      }\n    }\n  },\n  async created() {\n    this.contract.owner = await notesContract.methods.owner().call();\n  }\n  // updated() {\n  //   $(document).ready(function() {\n  //     // resize textarea\n  //     // M.updateTextFields();\n  //     // M.textareaAutoResize($(\"#note\"));\n  //   });\n  //   // $(\"document\").on(\"keypress\", function(e) {\n  //   //   $(\"#note\").focus();\n  //   // });\n  // }\n};\n\n$(document).ready(function() {\n  // keep waves at the bottom as additional lines of the note are added\n  $(\"#note\").on(\"keypress\", function(e) {\n    const text = $(this).val();\n    const lines = text.split(/\\r|\\r\\n|\\n/);\n    const totalLines = lines.length;\n\n    if (totalLines > 3) {\n      if (e.which == 13) {\n        $(\".ocean\").css(\"bottom\", `-${totalLines * 48}px`);\n      }\n    }\n  });\n});\n\nfunction runProgressBar() {\n  const container = document.getElementById(\"progress-bar-container\");\n  container.style.display = \"block\";\n\n  let elem = document.getElementById(\"progress-bar\");\n  let width = 0;\n  let id = setInterval(frame, 200);\n  function frame() {\n    if (width >= 100) {\n      elem.innerHTML = \"Your note has been submitted successfully! Stand by...\";\n      clearInterval(id);\n    } else {\n      width++;\n      elem.style.width = width + \"%\";\n      elem.innerHTML = width * 1 + \"%\";\n    }\n  }\n}\n</script>\n\n<style scoped>\n#progress-bar-indeterminate {\n  display: none;\n}\n.col-second {\n  top: 0;\n  min-height: 100vh;\n  background-color: #fff;\n  /* background-color: #fafbfb;\n  background-image: url(\"data:image/svg+xml,%3Csvg width='36' height='36' viewBox='0 0 36 36' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M36 0H0v36h36V0zM15.126 2H2v13.126c.367.094.714.24 1.032.428L15.554 3.032c-.188-.318-.334-.665-.428-1.032zM18 4.874V18H4.874c-.094-.367-.24-.714-.428-1.032L16.968 4.446c.318.188.665.334 1.032.428zM22.874 2h11.712L20 16.586V4.874c1.406-.362 2.512-1.468 2.874-2.874zm10.252 18H20v13.126c.367.094.714.24 1.032.428l12.522-12.522c-.188-.318-.334-.665-.428-1.032zM36 22.874V36H22.874c-.094-.367-.24-.714-.428-1.032l12.522-12.522c.318.188.665.334 1.032.428zm0-7.748V3.414L21.414 18h11.712c.362-1.406 1.468-2.512 2.874-2.874zm-18 18V21.414L3.414 36h11.712c.362-1.406 1.468-2.512 2.874-2.874zM4.874 20h11.712L2 34.586V22.874c1.406-.362 2.512-1.468 2.874-2.874z' fill='%23ececec' fill-opacity='0.4' fill-rule='evenodd'/%3E%3C/svg%3E\"); */\n}\n.project-desc-container {\n  position: absolute;\n  top: 35%;\n  transform: translateY(-50%);\n  text-align: center;\n  width: 48%;\n}\n.project-desc .logo img {\n  max-width: 150px;\n}\n.project-desc .headline {\n  color: #2bbbad;\n  font-size: 32px;\n  font-weight: 800;\n}\n.project-desc .desc {\n  color: #757575;\n  font-size: 16px;\n}\n.form-container {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 600px;\n  width: 100%;\n  /* position: absolute; */\n  /* top: 50%; */\n  /* transform: translateY(-50%); */\n}\n#progress-bar-container {\n  display: none;\n}\n.progress-bar-strip,\n.progress-bar-panel {\n  padding: 0.01em 16px;\n}\n.progress-bar-green,\n.progress-bar-hover-green:hover {\n  color: #fff;\n  background-color: #4caf50;\n}\n\n.progress-bar-center {\n  text-align: center;\n}\n\n.card-panel {\n  background-color: #fff;\n}\n#note,\nlabel,\n#password {\n  font-size: 22px;\n  font-weight: lighter;\n  color: #757575;\n}\n</style>"]}]}