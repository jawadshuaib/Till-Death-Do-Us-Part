{"remainingRequest":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/src/components/Note.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/src/components/Note.vue","mtime":1553145176442},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Header from \"./Header.vue\";\nimport Footer from \"./Footer.vue\";\n\nimport commonHelpers from \"@/helpers/common\";\nimport blockchainHelpers from \"@/helpers/blockchain\";\n\nimport notesContract from \"./../notes\";\n\nimport CryptoJS from \"crypto-js\";\n\nexport default {\n  name: \"Note\",\n  data() {\n    return {\n      contract: {\n        transactionHash: \"\",\n        token: this.$route.params.token,\n        whichNetwork: this.$route.params.whichNetwork,\n        secretKey: \"\",\n        dateCreated: 0,\n        note: \"\",\n        noteCopy: \"\",\n        noteOwnerHashed: \"\"\n      },\n      form: {\n        editMode: false,\n        isNoteOwner: false,\n        inProgress: false\n      },\n      decrypted: false,\n      error: null\n    };\n  },\n  components: {\n    Header,\n    Footer\n  },\n  created() {\n    // redirect if invalid token\n    // if (window.location.hostname != \"localhost\") {\n    if (!blockchainHelpers.doesTokenExist(this.contract.token)) {\n      this.$router.push({\n        name: \"/\"\n      });\n    }\n    // }\n  },\n  methods: {\n    // revert back to the original state\n    goBack() {\n      this.form.editMode = false;\n      this.contract.noteCopy = this.contract.note;\n    },\n    // check if the current user is the author of the note\n    async checkIfNoteOwner() {\n      const account = await blockchainHelpers.getAccount();\n      if (\n        commonHelpers.encryptSHA256(account) == this.contract.noteOwnerHashed\n      ) {\n        this.form.isNoteOwner = true;\n      }\n    },\n    async submitForm() {\n      let canSubmit = false;\n      if (this.contract.token !== null && this.contract.secretKey !== \"\") {\n        canSubmit = true;\n      }\n\n      let editedNote = this.contract.noteCopy;\n      if (canSubmit) {\n        if (editedNote !== \"\" && editedNote !== this.contract.note) {\n          // get the user's current account\n          const account = await blockchainHelpers.getAccount();\n\n          // encrypt the note\n          editedNote = commonHelpers.encryptAES(\n            editedNote,\n            this.contract.secretKey\n          );\n          await notesContract.methods\n            .editNote(\n              this.contract.token,\n              commonHelpers.encryptSHA256(account),\n              editedNote\n            )\n            .send({\n              from: account\n            })\n            .on(\"transactionHash\", tx => {\n              this.contract.transactionHash = tx;\n              this.form.inProgress = true;\n            })\n            .on(\"confirmation\", () => {\n              this.$router.push({\n                name: \"TransactionDetails\",\n                params: {\n                  transaction_id: this.contract.transactionHash,\n                  token: this.contract.token,\n                  secretKey: this.contract.secretKey,\n                  whichNetwork: this.contract.whichNetwork\n                }\n              });\n            });\n        }\n      }\n    },\n    async getNote() {\n      this.error = null;\n      let shouldGetNote = false;\n      const secretKey = this.contract.secretKey;\n      if (secretKey !== \"\") {\n        shouldGetNote = true;\n      } else {\n        this.error = \"Please enter a secret key to access this note.\";\n      }\n\n      if (shouldGetNote) {\n        const c = await notesContract.methods\n          .getNote(this.contract.token)\n          .call();\n\n        let note = \"\";\n        if (c[1] !== \"\") {\n          note = CryptoJS.AES.decrypt(c[1], secretKey).toString(\n            CryptoJS.enc.Utf8\n          );\n        } else {\n          this.error = \"Unable to retrieve note from the blockchain.\";\n        }\n\n        if (note !== \"\") {\n          this.contract.dateCreated = c[0];\n          this.contract.note = note;\n          this.contract.noteCopy = note;\n          this.contract.noteOwnerHashed = c[2];\n\n          this.checkIfNoteOwner();\n\n          this.decrypted = true;\n        } else {\n          this.error = \"Incorrect secret key provided. Please try again.\";\n        }\n      }\n    }\n  }\n};\n",{"version":3,"sources":["Note.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Note.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"row\">\n    <Header></Header>\n    <div class=\"container\">\n      <div class=\"card flow-text\" v-if=\"!decrypted\">\n        <div class=\"card-content\">\n          <p>Access the Encrypted Note</p>\n          <div class=\"row\">\n            <div class=\"input-field col s12\">\n              <input id=\"secretKey\" type=\"text\" v-model=\"contract.secretKey\">\n              <label for=\"secretKey\">Secret Key</label>\n            </div>\n            <div class=\"error\" v-if=\"error!==null\">{{ error }}</div>\n          </div>\n        </div>\n        <div class=\"card-action\">\n          <button class=\"waves-effect waves-light btn-large\" @click.prevent=\"getNote ()\">\n            <i class=\"material-icons left\">wrap_text</i>Retrieve Note\n          </button>\n        </div>\n      </div>\n      <div class=\"card flow-text\" v-else>\n        <div class=\"card-content\">\n          <div class=\"progress\" v-if=\"form.inProgress\">\n            <div class=\"indeterminate\"></div>\n          </div>\n          <p v-if=\"!form.editMode\">Decrypted Note from the Blockchain</p>\n          <p v-else>Edit Note on the Blockchain</p>\n          <blockquote>\n            <span>{{ contract.noteCopy }}</span>\n          </blockquote>\n        </div>\n\n        <!-- Only display the option below if it's from the author of the note -->\n        <div v-if=\"form.isNoteOwner\">\n          <div class=\"card-action\" v-if=\"!form.editMode\">\n            <button class=\"waves-effect waves-light btn-large\" @click.prevent=\"form.editMode=true\">\n              <i class=\"material-icons left\">edit</i>Edit this Note\n            </button>\n          </div>\n          <div class=\"card-content\" v-else>\n            <div class=\"input-field\">\n              <textarea\n                id=\"note\"\n                v-model=\"contract.noteCopy\"\n                class=\"materialize-textarea active\"\n                placeholder=\"Edit this Note\"\n              ></textarea>\n            </div>\n            <button class=\"waves-effect waves-light btn-large lighten-2\" @click.prevent=\"goBack\">\n              <i class=\"material-icons left\">replay</i>Go Back\n            </button>&nbsp;\n            <button class=\"waves-effect waves-light btn-large\" @click.prevent=\"submitForm\">\n              <i class=\"material-icons left\">notes</i>Edit Note\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <Footer></Footer>\n  </div>\n</template>\n<script>\nimport Header from \"./Header.vue\";\nimport Footer from \"./Footer.vue\";\n\nimport commonHelpers from \"@/helpers/common\";\nimport blockchainHelpers from \"@/helpers/blockchain\";\n\nimport notesContract from \"./../notes\";\n\nimport CryptoJS from \"crypto-js\";\n\nexport default {\n  name: \"Note\",\n  data() {\n    return {\n      contract: {\n        transactionHash: \"\",\n        token: this.$route.params.token,\n        whichNetwork: this.$route.params.whichNetwork,\n        secretKey: \"\",\n        dateCreated: 0,\n        note: \"\",\n        noteCopy: \"\",\n        noteOwnerHashed: \"\"\n      },\n      form: {\n        editMode: false,\n        isNoteOwner: false,\n        inProgress: false\n      },\n      decrypted: false,\n      error: null\n    };\n  },\n  components: {\n    Header,\n    Footer\n  },\n  created() {\n    // redirect if invalid token\n    // if (window.location.hostname != \"localhost\") {\n    if (!blockchainHelpers.doesTokenExist(this.contract.token)) {\n      this.$router.push({\n        name: \"/\"\n      });\n    }\n    // }\n  },\n  methods: {\n    // revert back to the original state\n    goBack() {\n      this.form.editMode = false;\n      this.contract.noteCopy = this.contract.note;\n    },\n    // check if the current user is the author of the note\n    async checkIfNoteOwner() {\n      const account = await blockchainHelpers.getAccount();\n      if (\n        commonHelpers.encryptSHA256(account) == this.contract.noteOwnerHashed\n      ) {\n        this.form.isNoteOwner = true;\n      }\n    },\n    async submitForm() {\n      let canSubmit = false;\n      if (this.contract.token !== null && this.contract.secretKey !== \"\") {\n        canSubmit = true;\n      }\n\n      let editedNote = this.contract.noteCopy;\n      if (canSubmit) {\n        if (editedNote !== \"\" && editedNote !== this.contract.note) {\n          // get the user's current account\n          const account = await blockchainHelpers.getAccount();\n\n          // encrypt the note\n          editedNote = commonHelpers.encryptAES(\n            editedNote,\n            this.contract.secretKey\n          );\n          await notesContract.methods\n            .editNote(\n              this.contract.token,\n              commonHelpers.encryptSHA256(account),\n              editedNote\n            )\n            .send({\n              from: account\n            })\n            .on(\"transactionHash\", tx => {\n              this.contract.transactionHash = tx;\n              this.form.inProgress = true;\n            })\n            .on(\"confirmation\", () => {\n              this.$router.push({\n                name: \"TransactionDetails\",\n                params: {\n                  transaction_id: this.contract.transactionHash,\n                  token: this.contract.token,\n                  secretKey: this.contract.secretKey,\n                  whichNetwork: this.contract.whichNetwork\n                }\n              });\n            });\n        }\n      }\n    },\n    async getNote() {\n      this.error = null;\n      let shouldGetNote = false;\n      const secretKey = this.contract.secretKey;\n      if (secretKey !== \"\") {\n        shouldGetNote = true;\n      } else {\n        this.error = \"Please enter a secret key to access this note.\";\n      }\n\n      if (shouldGetNote) {\n        const c = await notesContract.methods\n          .getNote(this.contract.token)\n          .call();\n\n        let note = \"\";\n        if (c[1] !== \"\") {\n          note = CryptoJS.AES.decrypt(c[1], secretKey).toString(\n            CryptoJS.enc.Utf8\n          );\n        } else {\n          this.error = \"Unable to retrieve note from the blockchain.\";\n        }\n\n        if (note !== \"\") {\n          this.contract.dateCreated = c[0];\n          this.contract.note = note;\n          this.contract.noteCopy = note;\n          this.contract.noteOwnerHashed = c[2];\n\n          this.checkIfNoteOwner();\n\n          this.decrypted = true;\n        } else {\n          this.error = \"Incorrect secret key provided. Please try again.\";\n        }\n      }\n    }\n  }\n};\n</script>\n<style>\n#secretKey,\nlabel {\n  font-size: 22px;\n  font-weight: lighter;\n  color: #757575;\n}\n</style>\n"]}]}