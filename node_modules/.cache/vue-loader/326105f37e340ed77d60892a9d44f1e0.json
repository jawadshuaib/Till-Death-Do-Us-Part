{"remainingRequest":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/src/components/TransactionDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/src/components/TransactionDetails.vue","mtime":1553626215672},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Header from \"./Header.vue\";\nimport Footer from \"./Footer.vue\";\nimport blockchainHelpers from \"@/helpers/blockchain\";\nimport web3 from \"./../web3\";\n\n// import notesContract from \"./../notes\";\n\nlet notesContract;\n\nexport default {\n  name: \"TransactionDetails\",\n  data() {\n    return {\n      error: \"\",\n      url: {\n        etherscan: \"\",\n        note: \"\"\n      },\n      contract: {\n        version: this.$route.params.version,\n        transactionID: this.$route.params.transaction_id,\n        token: this.$route.params.token,\n        secretKey: this.$route.params.secretKey,\n        whichNetwork: this.$route.params.whichNetwork,\n        note: \"\"\n      }\n    };\n  },\n  components: {\n    Header,\n    Footer\n  },\n  watch: {\n    $route: \"updateURLParams\"\n  },\n  async created() {\n    if (typeof this.contract.secretKey === \"undefined\") {\n      this.$router.push({\n        name: \"TextForm\"\n      });\n    }\n\n    if (this.contract.whichNetwork === \"mainnet\") {\n      this.url.etherscan =\n        \"https://etherscan.io/tx/\" + String(this.contract.transactionID);\n    } else {\n      this.url.etherscan =\n        \"https://\" +\n        this.contract.whichNetwork +\n        \".etherscan.io/tx/\" +\n        String(this.contract.transactionID);\n    }\n\n    let hostName = window.location.hostname;\n    hostName = hostName !== \"localhost\" ? `https://${hostName}` : hostName;\n    this.url.note = `${hostName}/note/${this.contract.token}/${\n      this.contract.whichNetwork\n    }`;\n\n    const version = this.contract.version;\n    if ((await blockchainHelpers.doesContractVersionExist(version)) === true) {\n      this.error = null;\n      const contractDetails = await blockchainHelpers.getContract(version);\n      const contractAddress = contractDetails[0];\n      const contractAbi = JSON.parse(contractDetails[1]);\n\n      notesContract = new web3.eth.Contract(contractAbi, contractAddress);\n\n      this.contract.owner = await notesContract.methods.owner().call();\n      this.getNote();\n    } else {\n      this.error = \"Incorrect version specified for the note.\";\n    }\n  },\n  methods: {\n    visitNotePage() {\n      this.$router.push({\n        name: \"Note\",\n        params: {\n          version: this.contract.version,\n          token: this.form.token,\n          whichNetwork: this.whichNetwork\n        }\n      });\n    },\n    updateURLParams() {\n      this.transactionID = this.$route.params.transaction_id;\n      this.token = this.$route.params.token;\n    },\n    async getNote() {\n      let shouldGetNote = false;\n      if (this.contract.token !== \"\") {\n        shouldGetNote = true;\n      }\n\n      if (shouldGetNote) {\n        if (blockchainHelpers.doesTokenExist(this.contract.token)) {\n          shouldGetNote = true;\n        } else {\n          shouldGetNote = false;\n        }\n      }\n\n      if (shouldGetNote) {\n        const c = await notesContract.methods\n          .getNote(this.contract.token)\n          .call();\n\n        // this.contract.dateCreated = c[0];\n        this.contract.note = c[1];\n      }\n    }\n  }\n};\n",{"version":3,"sources":["TransactionDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"TransactionDetails.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"row\">\n    <Header></Header>\n    <div class=\"container\">\n      <div class=\"card\" v-if=\"error===null\">\n        <div class=\"card-content flow-text\">\n          <p>\n            Your note has been encrypted and\n            <a\n              :href=\"`${url.etherscan}`\"\n              target=\"_blank\"\n            >posted on the blockchain</a>. Only someone with the secret key can retrieve your note.\n          </p>\n          <blockquote class=\"truncate\">\n            <strong>Encrypted Note:</strong>\n            {{ contract.note }}\n          </blockquote>\n        </div>\n        <div class=\"card-action flow-text\">\n          <div class=\"secret-key-desc\">\n            Secret Key:\n            <span class=\"secret-key\">{{ contract.secretKey }}</span>\n          </div>\n          <router-link\n            class=\"truncate\"\n            :to=\"{ name: 'Note', params: { token: contract.token, whichNetwork: contract.whichNetwork } }\"\n            target=\"_blank\"\n          >{{ url.note }}</router-link>\n        </div>\n      </div>\n      <div class=\"card flow-text\" v-if=\"error!==null\">\n        <div class=\"card-content red lighten-2 white-text\">{{ error }}</div>\n      </div>\n      <!-- <button @click.prevent=\"getTransactionReceipt\">Get Transaction Details</button> -->\n    </div>\n    <Footer></Footer>\n  </div>\n</template>\n<script>\nimport Header from \"./Header.vue\";\nimport Footer from \"./Footer.vue\";\nimport blockchainHelpers from \"@/helpers/blockchain\";\nimport web3 from \"./../web3\";\n\n// import notesContract from \"./../notes\";\n\nlet notesContract;\n\nexport default {\n  name: \"TransactionDetails\",\n  data() {\n    return {\n      error: \"\",\n      url: {\n        etherscan: \"\",\n        note: \"\"\n      },\n      contract: {\n        version: this.$route.params.version,\n        transactionID: this.$route.params.transaction_id,\n        token: this.$route.params.token,\n        secretKey: this.$route.params.secretKey,\n        whichNetwork: this.$route.params.whichNetwork,\n        note: \"\"\n      }\n    };\n  },\n  components: {\n    Header,\n    Footer\n  },\n  watch: {\n    $route: \"updateURLParams\"\n  },\n  async created() {\n    if (typeof this.contract.secretKey === \"undefined\") {\n      this.$router.push({\n        name: \"TextForm\"\n      });\n    }\n\n    if (this.contract.whichNetwork === \"mainnet\") {\n      this.url.etherscan =\n        \"https://etherscan.io/tx/\" + String(this.contract.transactionID);\n    } else {\n      this.url.etherscan =\n        \"https://\" +\n        this.contract.whichNetwork +\n        \".etherscan.io/tx/\" +\n        String(this.contract.transactionID);\n    }\n\n    let hostName = window.location.hostname;\n    hostName = hostName !== \"localhost\" ? `https://${hostName}` : hostName;\n    this.url.note = `${hostName}/note/${this.contract.token}/${\n      this.contract.whichNetwork\n    }`;\n\n    const version = this.contract.version;\n    if ((await blockchainHelpers.doesContractVersionExist(version)) === true) {\n      this.error = null;\n      const contractDetails = await blockchainHelpers.getContract(version);\n      const contractAddress = contractDetails[0];\n      const contractAbi = JSON.parse(contractDetails[1]);\n\n      notesContract = new web3.eth.Contract(contractAbi, contractAddress);\n\n      this.contract.owner = await notesContract.methods.owner().call();\n      this.getNote();\n    } else {\n      this.error = \"Incorrect version specified for the note.\";\n    }\n  },\n  methods: {\n    visitNotePage() {\n      this.$router.push({\n        name: \"Note\",\n        params: {\n          version: this.contract.version,\n          token: this.form.token,\n          whichNetwork: this.whichNetwork\n        }\n      });\n    },\n    updateURLParams() {\n      this.transactionID = this.$route.params.transaction_id;\n      this.token = this.$route.params.token;\n    },\n    async getNote() {\n      let shouldGetNote = false;\n      if (this.contract.token !== \"\") {\n        shouldGetNote = true;\n      }\n\n      if (shouldGetNote) {\n        if (blockchainHelpers.doesTokenExist(this.contract.token)) {\n          shouldGetNote = true;\n        } else {\n          shouldGetNote = false;\n        }\n      }\n\n      if (shouldGetNote) {\n        const c = await notesContract.methods\n          .getNote(this.contract.token)\n          .call();\n\n        // this.contract.dateCreated = c[0];\n        this.contract.note = c[1];\n      }\n    }\n  }\n};\n</script>\n<style scoped>\n.card-action a {\n  text-transform: lowercase !important;\n  padding: 5px;\n  border-radius: 3px;\n}\n.secret-key-desc {\n  color: #2bbbad;\n  font-size: 32px;\n  padding: 0 20px 20px 20px;\n}\n.secret-key {\n  color: #26a69a;\n}\n</style>\n"]}]}