{"remainingRequest":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/babel-loader/lib/index.js!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/src/components/TransactionDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/src/components/TransactionDetails.vue","mtime":1553626215672},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Header from \"./Header.vue\";\nimport Footer from \"./Footer.vue\";\nimport blockchainHelpers from \"@/helpers/blockchain\";\nimport web3 from \"./../web3\"; // import notesContract from \"./../notes\";\n\nvar notesContract;\nexport default {\n  name: \"TransactionDetails\",\n  data: function data() {\n    return {\n      error: \"\",\n      url: {\n        etherscan: \"\",\n        note: \"\"\n      },\n      contract: {\n        version: this.$route.params.version,\n        transactionID: this.$route.params.transaction_id,\n        token: this.$route.params.token,\n        secretKey: this.$route.params.secretKey,\n        whichNetwork: this.$route.params.whichNetwork,\n        note: \"\"\n      }\n    };\n  },\n  components: {\n    Header: Header,\n    Footer: Footer\n  },\n  watch: {\n    $route: \"updateURLParams\"\n  },\n  created: function () {\n    var _created = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      var hostName, version, contractDetails, contractAddress, contractAbi;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (typeof this.contract.secretKey === \"undefined\") {\n                this.$router.push({\n                  name: \"TextForm\"\n                });\n              }\n\n              if (this.contract.whichNetwork === \"mainnet\") {\n                this.url.etherscan = \"https://etherscan.io/tx/\" + String(this.contract.transactionID);\n              } else {\n                this.url.etherscan = \"https://\" + this.contract.whichNetwork + \".etherscan.io/tx/\" + String(this.contract.transactionID);\n              }\n\n              hostName = window.location.hostname;\n              hostName = hostName !== \"localhost\" ? \"https://\".concat(hostName) : hostName;\n              this.url.note = \"\".concat(hostName, \"/note/\").concat(this.contract.token, \"/\").concat(this.contract.whichNetwork);\n              version = this.contract.version;\n              _context.next = 8;\n              return blockchainHelpers.doesContractVersionExist(version);\n\n            case 8:\n              _context.t0 = _context.sent;\n\n              if (!(_context.t0 === true)) {\n                _context.next = 23;\n                break;\n              }\n\n              this.error = null;\n              _context.next = 13;\n              return blockchainHelpers.getContract(version);\n\n            case 13:\n              contractDetails = _context.sent;\n              contractAddress = contractDetails[0];\n              contractAbi = JSON.parse(contractDetails[1]);\n              notesContract = new web3.eth.Contract(contractAbi, contractAddress);\n              _context.next = 19;\n              return notesContract.methods.owner().call();\n\n            case 19:\n              this.contract.owner = _context.sent;\n              this.getNote();\n              _context.next = 24;\n              break;\n\n            case 23:\n              this.error = \"Incorrect version specified for the note.\";\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  methods: {\n    visitNotePage: function visitNotePage() {\n      this.$router.push({\n        name: \"Note\",\n        params: {\n          version: this.contract.version,\n          token: this.form.token,\n          whichNetwork: this.whichNetwork\n        }\n      });\n    },\n    updateURLParams: function updateURLParams() {\n      this.transactionID = this.$route.params.transaction_id;\n      this.token = this.$route.params.token;\n    },\n    getNote: function () {\n      var _getNote = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var shouldGetNote, c;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                shouldGetNote = false;\n\n                if (this.contract.token !== \"\") {\n                  shouldGetNote = true;\n                }\n\n                if (shouldGetNote) {\n                  if (blockchainHelpers.doesTokenExist(this.contract.token)) {\n                    shouldGetNote = true;\n                  } else {\n                    shouldGetNote = false;\n                  }\n                }\n\n                if (!shouldGetNote) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 6;\n                return notesContract.methods.getNote(this.contract.token).call();\n\n              case 6:\n                c = _context2.sent;\n                // this.contract.dateCreated = c[0];\n                this.contract.note = c[1];\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getNote() {\n        return _getNote.apply(this, arguments);\n      }\n\n      return getNote;\n    }()\n  }\n};",{"version":3,"sources":["TransactionDetails.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"row\">\n    <Header></Header>\n    <div class=\"container\">\n      <div class=\"card\" v-if=\"error===null\">\n        <div class=\"card-content flow-text\">\n          <p>\n            Your note has been encrypted and\n            <a\n              :href=\"`${url.etherscan}`\"\n              target=\"_blank\"\n            >posted on the blockchain</a>. Only someone with the secret key can retrieve your note.\n          </p>\n          <blockquote class=\"truncate\">\n            <strong>Encrypted Note:</strong>\n            {{ contract.note }}\n          </blockquote>\n        </div>\n        <div class=\"card-action flow-text\">\n          <div class=\"secret-key-desc\">\n            Secret Key:\n            <span class=\"secret-key\">{{ contract.secretKey }}</span>\n          </div>\n          <router-link\n            class=\"truncate\"\n            :to=\"{ name: 'Note', params: { token: contract.token, whichNetwork: contract.whichNetwork } }\"\n            target=\"_blank\"\n          >{{ url.note }}</router-link>\n        </div>\n      </div>\n      <div class=\"card flow-text\" v-if=\"error!==null\">\n        <div class=\"card-content red lighten-2 white-text\">{{ error }}</div>\n      </div>\n      <!-- <button @click.prevent=\"getTransactionReceipt\">Get Transaction Details</button> -->\n    </div>\n    <Footer></Footer>\n  </div>\n</template>\n<script>\nimport Header from \"./Header.vue\";\nimport Footer from \"./Footer.vue\";\nimport blockchainHelpers from \"@/helpers/blockchain\";\nimport web3 from \"./../web3\";\n\n// import notesContract from \"./../notes\";\n\nlet notesContract;\n\nexport default {\n  name: \"TransactionDetails\",\n  data() {\n    return {\n      error: \"\",\n      url: {\n        etherscan: \"\",\n        note: \"\"\n      },\n      contract: {\n        version: this.$route.params.version,\n        transactionID: this.$route.params.transaction_id,\n        token: this.$route.params.token,\n        secretKey: this.$route.params.secretKey,\n        whichNetwork: this.$route.params.whichNetwork,\n        note: \"\"\n      }\n    };\n  },\n  components: {\n    Header,\n    Footer\n  },\n  watch: {\n    $route: \"updateURLParams\"\n  },\n  async created() {\n    if (typeof this.contract.secretKey === \"undefined\") {\n      this.$router.push({\n        name: \"TextForm\"\n      });\n    }\n\n    if (this.contract.whichNetwork === \"mainnet\") {\n      this.url.etherscan =\n        \"https://etherscan.io/tx/\" + String(this.contract.transactionID);\n    } else {\n      this.url.etherscan =\n        \"https://\" +\n        this.contract.whichNetwork +\n        \".etherscan.io/tx/\" +\n        String(this.contract.transactionID);\n    }\n\n    let hostName = window.location.hostname;\n    hostName = hostName !== \"localhost\" ? `https://${hostName}` : hostName;\n    this.url.note = `${hostName}/note/${this.contract.token}/${\n      this.contract.whichNetwork\n    }`;\n\n    const version = this.contract.version;\n    if ((await blockchainHelpers.doesContractVersionExist(version)) === true) {\n      this.error = null;\n      const contractDetails = await blockchainHelpers.getContract(version);\n      const contractAddress = contractDetails[0];\n      const contractAbi = JSON.parse(contractDetails[1]);\n\n      notesContract = new web3.eth.Contract(contractAbi, contractAddress);\n\n      this.contract.owner = await notesContract.methods.owner().call();\n      this.getNote();\n    } else {\n      this.error = \"Incorrect version specified for the note.\";\n    }\n  },\n  methods: {\n    visitNotePage() {\n      this.$router.push({\n        name: \"Note\",\n        params: {\n          version: this.contract.version,\n          token: this.form.token,\n          whichNetwork: this.whichNetwork\n        }\n      });\n    },\n    updateURLParams() {\n      this.transactionID = this.$route.params.transaction_id;\n      this.token = this.$route.params.token;\n    },\n    async getNote() {\n      let shouldGetNote = false;\n      if (this.contract.token !== \"\") {\n        shouldGetNote = true;\n      }\n\n      if (shouldGetNote) {\n        if (blockchainHelpers.doesTokenExist(this.contract.token)) {\n          shouldGetNote = true;\n        } else {\n          shouldGetNote = false;\n        }\n      }\n\n      if (shouldGetNote) {\n        const c = await notesContract.methods\n          .getNote(this.contract.token)\n          .call();\n\n        // this.contract.dateCreated = c[0];\n        this.contract.note = c[1];\n      }\n    }\n  }\n};\n</script>\n<style scoped>\n.card-action a {\n  text-transform: lowercase !important;\n  padding: 5px;\n  border-radius: 3px;\n}\n.secret-key-desc {\n  color: #2bbbad;\n  font-size: 32px;\n  padding: 0 20px 20px 20px;\n}\n.secret-key {\n  color: #26a69a;\n}\n</style>\n"],"sourceRoot":"src/components"}]}