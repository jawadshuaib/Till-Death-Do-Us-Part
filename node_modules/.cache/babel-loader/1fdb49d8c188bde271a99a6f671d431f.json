{"remainingRequest":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/thread-loader/dist/cjs.js!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/babel-loader/lib/index.js!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/src/components/Note.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/src/components/Note.vue","mtime":1553626247055},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Header from \"./Header.vue\";\nimport Footer from \"./Footer.vue\";\nimport commonHelpers from \"@/helpers/common\";\nimport blockchainHelpers from \"@/helpers/blockchain\";\nimport web3 from \"./../web3\"; // import notesContract from \"./../notes\";\n\nimport CryptoJS from \"crypto-js\";\nvar notesContract;\nexport default {\n  name: \"Note\",\n  data: function data() {\n    return {\n      contract: {\n        version: this.$route.params.version,\n        transactionHash: \"\",\n        token: this.$route.params.token,\n        whichNetwork: this.$route.params.whichNetwork,\n        secretKey: \"\",\n        dateCreated: 0,\n        note: \"\",\n        noteCopy: \"\",\n        noteOwnerHashed: \"\"\n      },\n      form: {\n        editMode: false,\n        isNoteOwner: false,\n        inProgress: false\n      },\n      decrypted: false,\n      error: null\n    };\n  },\n  components: {\n    Header: Header,\n    Footer: Footer\n  },\n  created: function () {\n    var _created = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      var version, contractDetails, contractAddress, contractAbi;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // redirect if invalid token\n              if (!blockchainHelpers.doesTokenExist(this.contract.token)) {\n                this.$router.push({\n                  name: \"/\"\n                });\n              }\n\n              version = this.contract.version;\n              _context.next = 4;\n              return blockchainHelpers.doesContractVersionExist(version);\n\n            case 4:\n              _context.t0 = _context.sent;\n\n              if (!(_context.t0 === true)) {\n                _context.next = 15;\n                break;\n              }\n\n              this.error = null;\n              _context.next = 9;\n              return blockchainHelpers.getContract(version);\n\n            case 9:\n              contractDetails = _context.sent;\n              contractAddress = contractDetails[0];\n              contractAbi = JSON.parse(contractDetails[1]);\n              notesContract = new web3.eth.Contract(contractAbi, contractAddress);\n              _context.next = 16;\n              break;\n\n            case 15:\n              this.error = \"Incorrect version specified for the note.\";\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  methods: {\n    // revert back to the original state\n    goBack: function goBack() {\n      this.form.editMode = false;\n      this.contract.noteCopy = this.contract.note;\n    },\n    // check if the current user is the author of the note\n    checkIfNoteOwner: function () {\n      var _checkIfNoteOwner = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var account;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return blockchainHelpers.getAccount();\n\n              case 2:\n                account = _context2.sent;\n\n                if (commonHelpers.encryptSHA256(account) == this.contract.noteOwnerHashed) {\n                  this.form.isNoteOwner = true;\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function checkIfNoteOwner() {\n        return _checkIfNoteOwner.apply(this, arguments);\n      }\n\n      return checkIfNoteOwner;\n    }(),\n    submitForm: function () {\n      var _submitForm = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var _this = this;\n\n        var canSubmit, editedNote, account;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                canSubmit = false;\n\n                if (this.contract.token !== null && this.contract.secretKey !== \"\") {\n                  canSubmit = true;\n                }\n\n                editedNote = this.contract.noteCopy;\n\n                if (!canSubmit) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                if (!(editedNote !== \"\" && editedNote !== this.contract.note)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                _context3.next = 7;\n                return blockchainHelpers.getAccount();\n\n              case 7:\n                account = _context3.sent;\n                // encrypt the note\n                editedNote = commonHelpers.encryptAES(editedNote, this.contract.secretKey);\n                _context3.next = 11;\n                return notesContract.methods.editNote(this.contract.token, commonHelpers.encryptSHA256(account), editedNote).send({\n                  from: account\n                }).on(\"transactionHash\", function (tx) {\n                  _this.contract.transactionHash = tx;\n                  _this.form.inProgress = true;\n                }).on(\"confirmation\", function () {\n                  _this.$router.push({\n                    name: \"TransactionDetails\",\n                    params: {\n                      transaction_id: _this.contract.transactionHash,\n                      token: _this.contract.token,\n                      secretKey: _this.contract.secretKey,\n                      whichNetwork: _this.contract.whichNetwork\n                    }\n                  });\n                });\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function submitForm() {\n        return _submitForm.apply(this, arguments);\n      }\n\n      return submitForm;\n    }(),\n    getNote: function () {\n      var _getNote = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var shouldGetNote, secretKey, c, note;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.error = null;\n                shouldGetNote = false;\n                secretKey = this.contract.secretKey;\n\n                if (secretKey !== \"\") {\n                  shouldGetNote = true;\n                } else {\n                  this.error = \"Please enter a secret key to access this note.\";\n                }\n\n                if (!shouldGetNote) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                _context4.next = 7;\n                return notesContract.methods.getNote(this.contract.token).call();\n\n              case 7:\n                c = _context4.sent;\n                note = \"\";\n\n                if (c[1] !== \"\") {\n                  note = CryptoJS.AES.decrypt(c[1], secretKey).toString(CryptoJS.enc.Utf8);\n                } else {\n                  this.error = \"Unable to retrieve note from the blockchain.\";\n                }\n\n                if (note !== \"\") {\n                  this.contract.dateCreated = c[0];\n                  this.contract.note = note;\n                  this.contract.noteCopy = note;\n                  this.contract.noteOwnerHashed = c[2];\n                  this.checkIfNoteOwner();\n                  this.decrypted = true;\n                } else {\n                  this.error = \"Incorrect secret key provided. Please try again.\";\n                }\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getNote() {\n        return _getNote.apply(this, arguments);\n      }\n\n      return getNote;\n    }()\n  }\n};",{"version":3,"sources":["Note.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"row\">\n    <Header></Header>\n    <div class=\"container\">\n      <div class=\"card flow-text\" v-if=\"!decrypted\">\n        <div class=\"card-content\">\n          <p>Access the Encrypted Note</p>\n          <div class=\"row\">\n            <div class=\"input-field col s12\">\n              <input id=\"secretKey\" type=\"text\" v-model=\"contract.secretKey\">\n              <label for=\"secretKey\">Secret Key</label>\n            </div>\n            <div class=\"error\" v-if=\"error!==null\">{{ error }}</div>\n          </div>\n        </div>\n        <div class=\"card-action\">\n          <button class=\"waves-effect waves-light btn-large\" @click.prevent=\"getNote ()\">\n            <i class=\"material-icons left\">wrap_text</i>Retrieve Note\n          </button>\n        </div>\n      </div>\n      <div class=\"card flow-text\" v-else>\n        <div class=\"card-content\">\n          <div class=\"progress\" v-if=\"form.inProgress\">\n            <div class=\"indeterminate\"></div>\n          </div>\n          <p v-if=\"!form.editMode\">Decrypted Note from the Blockchain</p>\n          <p v-else>Edit Note on the Blockchain</p>\n          <blockquote>\n            <span>{{ contract.noteCopy }}</span>\n          </blockquote>\n        </div>\n\n        <!-- Only display the option below if it's from the author of the note -->\n        <div v-if=\"form.isNoteOwner\">\n          <div class=\"card-action\" v-if=\"!form.editMode\">\n            <button class=\"waves-effect waves-light btn-large\" @click.prevent=\"form.editMode=true\">\n              <i class=\"material-icons left\">edit</i>Edit this Note\n            </button>\n          </div>\n          <div class=\"card-content\" v-else>\n            <div class=\"input-field\">\n              <textarea\n                id=\"note\"\n                v-model=\"contract.noteCopy\"\n                class=\"materialize-textarea active\"\n                placeholder=\"Edit this Note\"\n              ></textarea>\n            </div>\n            <button class=\"waves-effect waves-light btn-large lighten-2\" @click.prevent=\"goBack\">\n              <i class=\"material-icons left\">replay</i>Go Back\n            </button>&nbsp;\n            <button class=\"waves-effect waves-light btn-large\" @click.prevent=\"submitForm\">\n              <i class=\"material-icons left\">notes</i>Edit Note\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <Footer></Footer>\n  </div>\n</template>\n<script>\nimport Header from \"./Header.vue\";\nimport Footer from \"./Footer.vue\";\nimport commonHelpers from \"@/helpers/common\";\nimport blockchainHelpers from \"@/helpers/blockchain\";\nimport web3 from \"./../web3\";\n// import notesContract from \"./../notes\";\nimport CryptoJS from \"crypto-js\";\n\nlet notesContract;\n\nexport default {\n  name: \"Note\",\n  data() {\n    return {\n      contract: {\n        version: this.$route.params.version,\n        transactionHash: \"\",\n        token: this.$route.params.token,\n        whichNetwork: this.$route.params.whichNetwork,\n        secretKey: \"\",\n        dateCreated: 0,\n        note: \"\",\n        noteCopy: \"\",\n        noteOwnerHashed: \"\"\n      },\n      form: {\n        editMode: false,\n        isNoteOwner: false,\n        inProgress: false\n      },\n      decrypted: false,\n      error: null\n    };\n  },\n  components: {\n    Header,\n    Footer\n  },\n  async created() {\n    // redirect if invalid token\n    if (!blockchainHelpers.doesTokenExist(this.contract.token)) {\n      this.$router.push({\n        name: \"/\"\n      });\n    }\n\n    const version = this.contract.version;\n    if ((await blockchainHelpers.doesContractVersionExist(version)) === true) {\n      this.error = null;\n      const contractDetails = await blockchainHelpers.getContract(version);\n      const contractAddress = contractDetails[0];\n      const contractAbi = JSON.parse(contractDetails[1]);\n\n      notesContract = new web3.eth.Contract(contractAbi, contractAddress);\n    } else {\n      this.error = \"Incorrect version specified for the note.\";\n    }\n  },\n  methods: {\n    // revert back to the original state\n    goBack() {\n      this.form.editMode = false;\n      this.contract.noteCopy = this.contract.note;\n    },\n    // check if the current user is the author of the note\n    async checkIfNoteOwner() {\n      const account = await blockchainHelpers.getAccount();\n      if (\n        commonHelpers.encryptSHA256(account) == this.contract.noteOwnerHashed\n      ) {\n        this.form.isNoteOwner = true;\n      }\n    },\n    async submitForm() {\n      let canSubmit = false;\n      if (this.contract.token !== null && this.contract.secretKey !== \"\") {\n        canSubmit = true;\n      }\n\n      let editedNote = this.contract.noteCopy;\n      if (canSubmit) {\n        if (editedNote !== \"\" && editedNote !== this.contract.note) {\n          // get the user's current account\n          const account = await blockchainHelpers.getAccount();\n\n          // encrypt the note\n          editedNote = commonHelpers.encryptAES(\n            editedNote,\n            this.contract.secretKey\n          );\n          await notesContract.methods\n            .editNote(\n              this.contract.token,\n              commonHelpers.encryptSHA256(account),\n              editedNote\n            )\n            .send({\n              from: account\n            })\n            .on(\"transactionHash\", tx => {\n              this.contract.transactionHash = tx;\n              this.form.inProgress = true;\n            })\n            .on(\"confirmation\", () => {\n              this.$router.push({\n                name: \"TransactionDetails\",\n                params: {\n                  transaction_id: this.contract.transactionHash,\n                  token: this.contract.token,\n                  secretKey: this.contract.secretKey,\n                  whichNetwork: this.contract.whichNetwork\n                }\n              });\n            });\n        }\n      }\n    },\n    async getNote() {\n      this.error = null;\n      let shouldGetNote = false;\n      const secretKey = this.contract.secretKey;\n      if (secretKey !== \"\") {\n        shouldGetNote = true;\n      } else {\n        this.error = \"Please enter a secret key to access this note.\";\n      }\n\n      if (shouldGetNote) {\n        const c = await notesContract.methods\n          .getNote(this.contract.token)\n          .call();\n\n        let note = \"\";\n        if (c[1] !== \"\") {\n          note = CryptoJS.AES.decrypt(c[1], secretKey).toString(\n            CryptoJS.enc.Utf8\n          );\n        } else {\n          this.error = \"Unable to retrieve note from the blockchain.\";\n        }\n\n        if (note !== \"\") {\n          this.contract.dateCreated = c[0];\n          this.contract.note = note;\n          this.contract.noteCopy = note;\n          this.contract.noteOwnerHashed = c[2];\n\n          this.checkIfNoteOwner();\n\n          this.decrypted = true;\n        } else {\n          this.error = \"Incorrect secret key provided. Please try again.\";\n        }\n      }\n    }\n  }\n};\n</script>\n<style>\n#secretKey,\nlabel {\n  font-size: 22px;\n  font-weight: lighter;\n  color: #757575;\n}\n</style>\n"],"sourceRoot":"src/components"}]}