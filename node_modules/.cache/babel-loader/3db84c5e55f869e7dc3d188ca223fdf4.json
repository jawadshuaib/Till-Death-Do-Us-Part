{"remainingRequest":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/thread-loader/dist/cjs.js!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/babel-loader/lib/index.js!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/eslint-loader/index.js??ref--13-0!/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/src/helpers/blockchain.js","dependencies":[{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/src/helpers/blockchain.js","mtime":1553624183536},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport web3 from \"./../web3\";\nimport notesContract from \"./../notes\";\nimport contractAddress from \"./../contractAddress\";\nexport default {\n  doesTokenExist: function () {\n    var _doesTokenExist = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(token) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return notesContract.methods.doesTokenExist(token).call();\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function doesTokenExist(_x) {\n      return _doesTokenExist.apply(this, arguments);\n    }\n\n    return doesTokenExist;\n  }(),\n  getAccount: function () {\n    var _getAccount = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2() {\n      var accounts;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return web3.eth.getAccounts();\n\n            case 2:\n              accounts = _context2.sent;\n\n              if (!(accounts.length === 0)) {\n                _context2.next = 5;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", null);\n\n            case 5:\n              return _context2.abrupt(\"return\", accounts[0]);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function getAccount() {\n      return _getAccount.apply(this, arguments);\n    }\n\n    return getAccount;\n  }(),\n  getLatestContractVersion: function () {\n    var _getLatestContractVersion = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee3() {\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return contractAddress.methods.latestVersion().call();\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function getLatestContractVersion() {\n      return _getLatestContractVersion.apply(this, arguments);\n    }\n\n    return getLatestContractVersion;\n  }(),\n  getContract: function () {\n    var _getContract = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee4(version) {\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return contractAddress.methods.getContract(version).call();\n\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function getContract(_x2) {\n      return _getContract.apply(this, arguments);\n    }\n\n    return getContract;\n  }(),\n  doesContractVersionExist: function () {\n    var _doesContractVersionExist = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee5(version) {\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return contractAddress.methods.doesVersionExist(version).call();\n\n            case 2:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function doesContractVersionExist(_x3) {\n      return _doesContractVersionExist.apply(this, arguments);\n    }\n\n    return doesContractVersionExist;\n  }()\n};",{"version":3,"sources":["/Users/jawadshuaib/Desktop/js/vue-projects/till-death-do-us-part/src/helpers/blockchain.js"],"names":["web3","notesContract","contractAddress","doesTokenExist","token","methods","call","getAccount","eth","getAccounts","accounts","length","getLatestContractVersion","latestVersion","getContract","version","doesContractVersionExist","doesVersionExist"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,aAAP,MAA0B,YAA1B;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AAEA,eAAe;AACPC,EAAAA,cADO;AAAA;AAAA;AAAA,6CACQC,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEEH,aAAa,CAACI,OAAd,CAAsBF,cAAtB,CAAqCC,KAArC,EAA4CE,IAA5C,EAFF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAIPC,EAAAA,UAJO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKYP,IAAI,CAACQ,GAAL,CAASC,WAAT,EALZ;;AAAA;AAKLC,cAAAA,QALK;;AAAA,oBAMPA,QAAQ,CAACC,MAAT,KAAoB,CANb;AAAA;AAAA;AAAA;;AAAA,gDAOF,IAPE;;AAAA;AAAA,gDAUJD,QAAQ,CAAC,CAAD,CAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAYPE,EAAAA,wBAZO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAaEV,eAAe,CAACG,OAAhB,CAAwBQ,aAAxB,GAAwCP,IAAxC,EAbF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAePQ,EAAAA,WAfO;AAAA;AAAA;AAAA,8CAeKC,OAfL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAgBEb,eAAe,CAACG,OAAhB,CAAwBS,WAAxB,CAAoCC,OAApC,EAA6CT,IAA7C,EAhBF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkBPU,EAAAA,wBAlBO;AAAA;AAAA;AAAA,8CAkBkBD,OAlBlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAmBEb,eAAe,CAACG,OAAhB,CAAwBY,gBAAxB,CAAyCF,OAAzC,EAAkDT,IAAlD,EAnBF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import web3 from \"./../web3\";\nimport notesContract from \"./../notes\";\nimport contractAddress from \"./../contractAddress\";\n\nexport default {\n  async doesTokenExist(token) {\n    return await notesContract.methods.doesTokenExist(token).call();\n  },\n  async getAccount() {\n    const accounts = await web3.eth.getAccounts();\n    if (accounts.length === 0) {\n      return null;\n    }\n    // assuming first account in metamask is the one the user wishes to use\n    return accounts[0];\n  },\n  async getLatestContractVersion() {\n    return await contractAddress.methods.latestVersion().call();\n  },\n  async getContract(version) {\n    return await contractAddress.methods.getContract(version).call();\n  },\n  async doesContractVersionExist(version) {\n    return await contractAddress.methods.doesVersionExist(version).call();\n  }\n};\n"]}]}